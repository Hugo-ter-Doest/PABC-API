openapi: 3.1.0
info:
  title: PodiumD Authorization API
  description: API for managing Functional Roles, Application Roles, Domains, and Entity Types with full CRUD and relationship support.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local development server

paths:
  ############################
  # Functional Role Endpoints
  ############################
  /functionalRoles:
    get:
      summary: Get all Functional Roles
      tags:
        - Functional Roles
      responses:
        '200':
          description: List of Functional Roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FunctionalRole'

  ############################
  # Application Role Endpoints
  ############################
  /applicationRoles:
    get:
      summary: Get all Application Roles
      tags:
        - Application Roles
      responses:
        '200':
          description: List of Application Roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationRole'

  ############################
  # Domain Endpoints
  ############################
  /domains:
    get:
      summary: Get all Domains
      tags:
        - Domains
      responses:
        '200':
          description: List of Domains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'

    post:
      summary: Create a Domain
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDomain"
      responses:
        '201':
          description: Domain created

  /domains/{id}:
    get:
      summary: Get a Domain by identifier
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Domain details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Domain'

    put:
      summary: Update a Domain
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDomain"
      responses:
        '200':
          description: Domain updated

    delete:
      summary: Delete a Domain
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Domain deleted

  /domains/{id}/entityTypes:
    post:
      summary: Assign Entity Types to a Domain
      tags:
        - Domains
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityTypeIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Entity Types assigned successfully

  ############################
  # Entity Type Endpoints
  ############################
  /entityTypes:
    get:
      summary: Get all Entity Types
      tags:
        - Entity Types
      responses:
        '200':
          description: List of Entity Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityType'


    post:
      summary: Create an Entity Type
      tags:
        - Entity Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEntityType"
      responses:
        '201':
          description: Entity Type created

  /entityTypes/{id}:
    get:
      summary: Get an Entity Type
      tags:
        - Entity Types
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Entity type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityType'

    put:
      summary: Update an Entity Type
      tags:
        - Entity Types
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEntityType"
      responses:
        '200':
          description: Entity Type updated

    delete:
      summary: Delete an Entity Type
      tags:
        - Entity Types
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Entity Type deleted
  /entityTypes/{id}/domains:
    get:
      summary: Get all Domains this entity types is assigned to
      tags:
        - Entity Types
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of Domains
          content:
            application/json:
              schema:
                type: object
                properties:
                  entityTypeId:
                    type: string
                    description: The ID of the Entity Type
                  domains:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Domain'

  ############################
  # FunctionalRoleDomains
  ############################
  /functionalRoleDomains:
    get:
      summary: Get all Functional Role-Domain associations
      operationId: getFunctionalRoleDomains
      tags:
        - Functional Role-Domain Association
      responses:
        "200":
          description: List of all Functional Role-Domain associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FunctionalRoleDomain"

    post:
      summary: Create Functional Role-Domain Association
      operationId: createFunctionalRoleDomain
      tags:
        - Functional Role-Domain Association
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFunctionalRoleDomain"
      responses:
        '201':
          description: Association (Functional Role, Domain) created
  
    delete:
      summary: Delete a Functional Role-Domain Association
      operationId: deleteFunctionalRoleDomain
      tags:
        - Functional Role-Domain Association
      parameters:
        - in: path
          name: functionalRoleDomainId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Functional Role-Domain association deleted

  /functionalRoleDomains/{functionalRoleDomainId}/applicationRoles:
    post:
      summary: Assign Application Roles to a Functional Role-Domain Association
      operationId: assignApplicationRolesToFunctionalRoleDomain
      tags:
        - Functional Role-Domain Association
      parameters:
        - in: path
          name: functionalRoleDomainId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationRoleNames:
                  type: array
                  items:
                    type: string
              required:
                - applicationRoleNames
      responses:
        "200":
          description: Application Roles successfully assigned to Functional Role-Domain Association
          content:
            application/json:
              schema:
                type: object
                properties:
                  functionalRoleDomainId:
                    type: string
                    format: uuid
                  applicationRoles:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApplicationRole"

    get:
      summary: Get Application Roles for a Functional Role-Domain Association
      operationId: getApplicationRolesForFunctionalRoleDomain
      tags:
        - Functional Role-Domain Association
      parameters:
        - in: path
          name: functionalRoleDomainId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of Application Roles for the Functional Role-Domain Association
          content:
            application/json:
              schema:
                type: object
                properties:
                  functionalRoleDomainId:
                    type: string
                    format: uuid
                  applicationRoles:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApplicationRole"

  ################################
  # This is the main calls for clients to get all access rights either per application role or per entity type
  ################################
  /getEntityTypesPerApplicationRole:
    post:
      tags:
        - getEntityTypesPerApplicationRole
      summary: Get allowed entity types per application role for a list of functional roles
      description: Returns a list of objects, where each object contains an application role and a list of allowed entity types for that application role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                functionalRoleNames:
                  type: array
                  items:
                    type: string
                  description: List of functional role IDs
      responses:
        200:
          description: List of allowed entity types per application role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTypesPerApplicationRole"

  /getApplicationRolesPerEntityType:
    post:
      tags:
        - getApplicationRolesPerEntityType
      summary: Get allowed application roles per entity type for a list of functional roles
      description: Returns a list of objects, where each object contains an application role and a list of allowed application roles for that entity type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                functionalRoleNames:
                  type: array
                  items:
                    type: string
                  description: List of functional role IDs
      responses:
        200:
          description: List of allowed application roles per entity type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationRolesPerEntityType"

############################
# Components
############################
components:
  schemas:
    FunctionalRole:
      type: object
      properties:
        name:
          type: string
          required: true

    ApplicationRole:
      type: object
      properties:
        name:
          type: string
          required: true
        application:
          type: string

    Domain:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        omschrijving:
          type: string
        entityTypes:
          type: array
          items:
            $ref: '#/components/schemas/EntityType'

    CreateDomain:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        omschrijving:
          type: string

    EntityType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: enum
          enum: [zaaktype]
        uri:
          type: uri

    CreateEntityType:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    FunctionalRoleDomain:
      type: object
      properties:
        id:
          type: string
          format: uuid
        functionalRoleName:
          type: string
        domainId:
          type: string
          format: uuid

    CreateFunctionalRoleDomain:
      type: object
      properties:
        functionalRoleName:
          type: string
        domainId:
          type: string
          format: uuid

    EntityTypesPerApplicationRole:
      type: array
      items:
        type: object
        properties:
          applicationRoleName:
            type: string
          entityTypes:
            type: array
            items:
              $ref: '#/components/schemas/EntityType'

    ApplicationRolesPerEntityType:
      type: array
      items:
        type: object
        properties:
          entityTypeId:
            type: string
            format: uuid
          applicationRoles:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationRole'
